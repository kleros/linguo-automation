# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: linguo-bot
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin
  - serverless-plugin-ifelse
  - serverless-dynamodb-local
  - serverless-offline

custom:
  webpack:
    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file
    includeModules: # enable auto-packing of external modules
      forceExclude:
        - aws-sdk
    packager: 'yarn'   # Packager that will be used to package your external modules

  dynamodb:
    stages:
      - kovan
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true

  currentStage: ${opt:stage, self:provider.stage}
  serverlessIfElse:
    - If: '"${self:custom.currentStage}" == "kovan"'
      Set:
        provider.environment.CHAIN_ID: 42
      ElseSet:
        provider.environment.CHAIN_ID: 1

provider:
  name: aws
  region: ${env:AWS_REGION,'us-east-2'}
  stage: kovan
  runtime: nodejs10.x
  environment:
    TASKS_TABLE_NAME: Linguo_TranslationTasks_${self:custom.currentStage}
    CHAIN_METADATA_TABLE_NAME: Linguo_ChainMetadata_${self:custom.currentStage}

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource: arn:aws:s3:::kleros-bots-private-keys
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
      Resource:
        Fn::Join:
          - ""
          - - arn:aws:s3:::kleros-bots-private-keys
            - "/linguo.json"
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource:
        - Fn::GetAtt: [ ChainMetadataTable, Arn ]
        - Fn::GetAtt: [ TranslationTasksTable, Arn ]
        - Fn::Join:
          - ""
          - - Fn::GetAtt: [ TranslationTasksTable, Arn ]
            - "/index/byStatus"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  checkNewTasks:
    handler: src/handler.checkNewTasks
    events:
      - schedule:
          rate: cron(0 * * * ? *) # every 1 hour at hh:00
  checkIncompleteTasks:
    handler: src/handler.checkIncompleteTasks
    events:
      - schedule:
          rate: cron(0 */4 * * ? *) # every 4 hours at hh:00
  checkTasksAwaitingReview:
    handler: src/handler.checkTasksAwaitingReview
    events:
      - schedule:
          rate: cron(10 */4 * * ? *) # every 4 hours at hh:10
  checkTasksInDispute:
    handler: src/handler.checkTasksInDispute
    events:
      - schedule:
          rate: cron(20 */4 * * ? *) # every 4 hours at hh:20
  checkResolvedTasks:
    handler: src/handler.checkResolvedTasks
    events:
      - schedule:
          rate: cron(30 */4 * * ? *) # every 4 hours at hh:30
  fullSync:
    handler: src/handler.fullSync

# you can add CloudFormation resource templates here
resources:
  Resources:
    TranslationTasksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TASKS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: contractAddress
            AttributeType: S
          - AttributeName: id
            AttributeType: N
          - AttributeName: status
            AttributeType: N
        KeySchema:
          - AttributeName: contractAddress
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: byStatus
            KeySchema:
              - AttributeName: status
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    ChainMetadataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CHAIN_METADATA_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

  # Outputs:
  #    NewOutput:
  #      Description: "Description for the output"
  #      Value: "Some output value"
