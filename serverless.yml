# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: linguo-automation
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin
  - serverless-plugin-ifelse
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-offline-sns

useDotenv: true

custom:
  webpack:
    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file
    packager: 'yarn'   # Packager that will be used to package your external modules
    includeModules: # enable auto-packing of external modules
      forceExclude:
        - aws-sdk

  dynamodb:
    stages:
      - kovan
      - sokol
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true

  serverless-offline-sns:
    port: 4002 # a free port for the sns server to run on

  currentStage: ${opt:stage, self:provider.stage}

  webServiceEndpoint:
    Fn::Join:
      - ''
      - - 'https://'
        - Ref: ApiGatewayRestApi
        - '.execute-api.'
        - ${aws:region}
        - '.amazonaws.com/'
        - ${self:provider.stage}

  prune:
    automatic: true
    number: 4

  chainId:
    kovan: 42
    mainnet: 1
    sokol: 77
    xdai: 100

  jsonRpcUrl:
    kovan: https://kovan.infura.io/v3/${env:INFURA_API_KEY}
    mainnet: https://mainnet.infura.io/v3/${env:INFURA_API_KEY}
    sokol: https://sokol.poa.network
    xdai: https://rpc.xdaichain.com

variablesResolutionMode: 20210326

provider:
  name: aws
  region: ${env:AWS_REGION,'us-east-2'}
  stage: sokol
  runtime: nodejs14.x
  lambdaHashingVersion: "20201221"
  apiGateway:
    shouldStartNameWithService: true
  environment:
    CHAIN_ID: ${self:custom.chainId.${self:custom.currentStage}}
    JSON_RPC_URL: ${self:custom.jsonRpcUrl.${self:custom.currentStage}}
    TASKS_TABLE_NAME: Linguo_TranslationTasks_${self:custom.currentStage}
    CHAIN_METADATA_TABLE_NAME: Linguo_ChainMetadata_${self:custom.currentStage}
    USER_SETTINGS_TABLE_NAME: Linguo_UserSettings_${self:custom.currentStage}
    EVENTS_TOPIC_NAME: Linguo_OnChainEvents_${self:custom.currentStage}.fifo
    EVENTS_TOPIC_ARN: !Ref OnChainEventsTopic
    EMAIL_NOTIFICATIONS_QUEUE_NAME: Linguo_EmailNotifications_${self:custom.currentStage}.fifo
    EMAIL_NOTIFICATIONS_DLQ_NAME: Linguo_EmailNotificationsDLQ_${self:custom.currentStage}.fifo
    EMAIL_NOTIFICATIONS_QUEUE_URL: !Ref EmailNotificationsQueue

# you can add statements to the Lambda function's IAM Role here
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:ListBucket"
          Resource: arn:aws:s3:::kleros-bots-private-keys
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
          Resource:
            Fn::Join:
              - ""
              - - arn:aws:s3:::kleros-bots-private-keys
                - "/linguo.json"
        - Effect: "Allow"
          Action:
            - "dynamodb:*"
          Resource:
            - Fn::GetAtt: [ ChainMetadataTable, Arn ]
            - Fn::GetAtt: [ TranslationTasksTable, Arn ]
            - Fn::Join:
              - ""
              - - Fn::GetAtt: [ TranslationTasksTable, Arn ]
                - "/index/byStatus"
            - Fn::GetAtt: [ UserSettingsTable, Arn ]
        - Effect: "Allow"
          Action:
            - "sns:*"
          Resource:
            - Ref: OnChainEventsTopic
        - Effect: "Allow"
          Action:
            - "sqs:*"
          Resource:
            - Fn::GetAtt: [ EmailNotificationsQueue, Arn ]
            - Fn::GetAtt: [ EmailNotificationsDLQ, Arn ]

functions:
  checkNewTasks:
    handler: src/handlers/task-lifecycle/index.checkNewTasks
    timeout: 900
    events:
      - schedule:
          rate: cron(0 * * * ? *) # every hour hh:00

  checkIncompleteTasks:
    handler: src/handlers/task-lifecycle/index.checkIncompleteTasks
    timeout: 900
    events:
      - schedule:
          rate: cron(0 * * * ? *) # every hour hh:00

  checkTasksAwaitingReview:
    handler: src/handlers/task-lifecycle/index.checkTasksAwaitingReview
    timeout: 900
    events:
      - schedule:
          rate: cron(10 * * * ? *) # every hour hh:10

  checkTasksInDispute:
    handler: src/handlers/task-lifecycle/index.checkTasksInDispute
    timeout: 900
    events:
      - schedule:
          rate: cron(20 * * * ? *) # every hour hh:20

  checkResolvedTasks:
    handler: src/handlers/task-lifecycle/index.checkResolvedTasks
    timeout: 900
    events:
      - schedule:
          rate: cron(30 * * * ? *) # every hour at hh:30
  fullSync:
    timeout: 900
    handler: src/handlers/task-lifecycle/index.fullSync

  saveUserSettings:
    handler: src/handlers/user-settings/index.saveUserSettings
    events:
      - http:
          path: user/{address}/settings
          method: PUT
          cors: true
          request:
            schemas:
              application/json: ${file(src/schemas/saveUserSettings.json)}

  getUserSettings:
    handler: src/handlers/user-settings/index.getUserSettings
    events:
      - http:
          path: user/{address}/settings
          method: GET
          cors: true

  checkEvents:
    handler: src/handlers/on-chain-events/index.checkEvents
    timeout: 900
    events:
      - schedule:
          rate: cron(0 * * * ? *) # every hour at hh:00

  emailNotifications:
    handler: src/handlers/email-notifications/index.receiveEvent
    environment:
      UNSUBSCRIBE_ENDPOINT:
        Fn::Join:
          - ''
          - - ${self:custom.webServiceEndpoint}
            - /unsubscription
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ EmailNotificationsQueue, Arn ]
          batchSize: 1

  unsubscribe:
    handler: src/handlers/email-notifications/index.receiveUnsubscription
    events:
      - http:
          path: unsubscription
          method: GET
          cors: true


# you can add CloudFormation resource templates here
resources:
  Resources:
    TranslationTasksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TASKS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: contractAddress
            AttributeType: S
          - AttributeName: id
            AttributeType: N
          - AttributeName: status
            AttributeType: N
        KeySchema:
          - AttributeName: contractAddress
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        GlobalSecondaryIndexes:
          - IndexName: byStatus
            KeySchema:
              - AttributeName: status
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    ChainMetadataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CHAIN_METADATA_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    UserSettingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_SETTINGS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: address
            AttributeType: S
        KeySchema:
          - AttributeName: address
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    OnChainEventsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:provider.environment.EVENTS_TOPIC_NAME}
        FifoTopic: true
        Subscription:
          - Endpoint:
              Fn::GetAtt: [ EmailNotificationsQueue, Arn ]
            Protocol: "sqs"

    EmailNotificationsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.environment.EMAIL_NOTIFICATIONS_QUEUE_NAME}
        FifoQueue: true
        DeduplicationScope: messageGroup
        MessageRetentionPeriod: 1209600 # 14 days
        VisibilityTimeout: 300 # 5 minutes
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt: [ EmailNotificationsDLQ, Arn ]
          maxReceiveCount: 5

    EmailNotificationsDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.environment.EMAIL_NOTIFICATIONS_DLQ_NAME}
        FifoQueue: true
        MessageRetentionPeriod: 1209600 # 14 days

    EmailNotificationsQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - Ref: EmailNotificationsQueue
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            Sid: allow-sns-messages
            Effect: Allow
            Principal: '*'
            Action:
              - sqs:SendMessage
            Resource:
              Fn::GetAtt: [ EmailNotificationsQueue, Arn ]
            Condition:
              ArnEquals:
                'aws:SourceArn': !Ref OnChainEventsTopic
